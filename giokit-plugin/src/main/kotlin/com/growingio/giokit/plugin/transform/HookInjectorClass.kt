// This class is auto-generated by Inject-Processor, please don't modify it!
package com.growingio.giokit.plugin.transform

import org.objectweb.asm.Opcodes
import kotlin.String
import kotlin.collections.MutableList

object HookInjectorClass {

    data class HookData(
        val hookName: String,
        val targetClassName: String,
        val targetMethodName: String,
        val targetMethodDesc: String? = null,
        val hookAroundData: HookAroundData? = null,
        val isAfter: Boolean = false
    )

    data class HookAroundData(
        val opcode: Int,
        val owner: String,
        val name: String,
        val descriptor: String
    )

    val HTTP_V3_CLASSES: MutableList<HookData>
    val HTTP_SAAS_CLASSES: MutableList<HookData>
    val DATABASE_V3_CLASSES: MutableList<HookData>
    val DATABASE_SAAS_CLASSES: MutableList<HookData>
    val WEBVIEW_CLASSES: MutableList<HookData>
    val WEBVIEW_EXTRA_CLASSES: MutableList<HookData>
    val CONFIG_CLASSES: MutableList<HookData>

    const val HTTP_V3_OKHTTP = "okhttp3"
    const val HTTP_V3_URLCONN = "urlconn3"
    const val HTTP_V3_VOLLEY_SUCCESS = "volley_success"
    const val HTTP_V3_VOLLEY_FAIL = "volley_fail"

    const val HTTP_SAAS_URLCONN = "urlconn"

    const val DB_V3_INSERT = "db_insert"
    const val DB_V3_OVERDUE = "db_overdue"
    const val DB_V3_REMOVE = "db_remove"
    const val DB_V3_DELETE = "db_delete"

    const val DB_SAAS_SAVE = "db_save"
    const val DB_SAAS_CLEANUP = "db_cleanup"
    const val DB_SAAS_CLEAR = "db_clear"

    const val WEBVIEW_SYSTEM = "webview_system"
    const val WEBVIEW_UC = "webview_uc"
    const val WEBVIEW_X5 = "webview_x5"
    const val WEBVIEW_EXTRA_SYSTEM = "webview_extra_system"
    const val WEBVIEW_EXTRA_X5 = "webview_extra_x5"
    const val WEBVIEW_EXTRA_UC = "webview_extra_uc"

    const val APPLICATION_START = "app_start"
    const val CONFIG_INJECT = "config_inject"

    init {
        HTTP_V3_CLASSES = mutableListOf(
            HookData(
                HTTP_V3_OKHTTP,
                "com.growingio.android.okhttp3.OkHttpDataLoader\$Factory",
                "getsInternalClient",
                null,
                HookAroundData(
                    Opcodes.INVOKEVIRTUAL,
                    "okhttp3/OkHttpClient\$Builder",
                    "addInterceptor",
                    "(Lokhttp3/Interceptor;)Lokhttp3/OkHttpClient\$Builder;"
                ),
                isAfter = true
            ),
            HookData(
                HTTP_V3_URLCONN,
                "com.growingio.android.urlconnection.UrlConnectionFetcher",
                "loadDataWithRedirects",
                null,
                HookAroundData(
                    Opcodes.PUTFIELD,
                    "com/growingio/android/urlconnection/UrlConnectionFetcher",
                    "stream",
                    "Ljava/io/InputStream;"
                )
            ),
            HookData(
                HTTP_V3_VOLLEY_SUCCESS,
                "com.growingio.android.volley.VolleyDataFetcher\$GioRequest",
                "parseNetworkResponse",
            ),
            HookData(
                HTTP_V3_VOLLEY_FAIL,
                "com.growingio.android.volley.VolleyDataFetcher\$GioRequest",
                "parseNetworkError",
            )
        )

        HTTP_SAAS_CLASSES = mutableListOf(
            HookData(
                HTTP_SAAS_URLCONN,
                "com.growingio.android.sdk.data.net.HttpService",
                "performRequest",
                "(Lcom/growingio/android/sdk/data/net/DNSService\$HostInformation;)Landroid/util/Pair;",
                HookAroundData(
                    Opcodes.GETSTATIC,
                    "com/growingio/android/sdk/collection/GConfig",
                    "DEBUG",
                    "Z"
                )
            )
        )

        DATABASE_V3_CLASSES = mutableListOf(
            HookData(
                DB_V3_INSERT,
                "com.growingio.android.database.EventDataManager",
                "insertEvent", null,
                HookAroundData(
                    Opcodes.GETFIELD,
                    "com/growingio/android/database/EventDataManager",
                    "context",
                    "Landroid/content/Context;"
                )
            ),
            HookData(
                DB_V3_OVERDUE,
                "com.growingio.android.database.EventDataManager",
                "removeOverdueEvents",
            ),
            HookData(
                DB_V3_REMOVE,
                "com.growingio.android.database.EventDataManager",
                "removeEventById",
            ),
            HookData(
                DB_V3_DELETE,
                "com.growingio.android.database.EventDataManager",
                "removeEvents",
            ),
        )

        DATABASE_SAAS_CLASSES = mutableListOf(
            HookData(
                DB_SAAS_SAVE,
                "com.growingio.android.sdk.data.db.DBAdapter",
                "saveEvent",
            ),
            HookData(
                DB_SAAS_CLEANUP,
                "com.growingio.android.sdk.data.db.DBAdapter",
                "cleanupEvents", "(J)V",
            ),
            HookData(
                DB_SAAS_CLEAR,
                "com.growingio.android.sdk.data.db.DBAdapter",
                "cleanDataString",
            ),
        )

        WEBVIEW_CLASSES = mutableListOf(
            HookData(
                WEBVIEW_SYSTEM,
                "android.webkit.WebChromeClient",
                "onProgressChanged",
                "(Landroid/webkit/WebView;I)V"
            ),
            HookData(
                WEBVIEW_X5,
                "com.tencent.smtt.sdk.WebChromeClient",
                "onProgressChanged",
                "(Lcom/tencent/smtt/sdk/WebView;I)V"
            ),
            HookData(
                WEBVIEW_UC,
                "com.uc.webview.export.WebChromeClient",
                "onProgressChanged",
                "(Lcom/uc/webview/export/WebView;I)V"
            )
        )
        WEBVIEW_EXTRA_CLASSES = mutableListOf(
            HookData(
                WEBVIEW_EXTRA_SYSTEM,
                "com.growingio.android.sdk.autoburry.VdsJsHelper",
                "onProgressChanged",
                "(Landroid/webkit/WebView;I)V"
            ),
            HookData(
                WEBVIEW_EXTRA_X5,
                "com.growingio.android.sdk.autoburry.VdsJsHelper",
                "onX5ProgressChanged",
                "(Lcom/tencent/smtt/sdk/WebView;I)V"
            ),
            HookData(
                WEBVIEW_EXTRA_UC,
                "com.growingio.android.sdk.autoburry.VdsJsHelper",
                "onUcProgressChanged",
                "(Lcom/uc/webview/export/WebView;I)V"
            ),
        )

        CONFIG_CLASSES = mutableListOf(
            HookData(
                APPLICATION_START,
                "android.app.Application",
                "onCreate",
                "()V",
                isAfter = true
            ),

            HookData(
                CONFIG_INJECT,
                "com.growingio.giokit.hook.GioPluginConfig",
                "initGioKitConfig",
                "()V",
            ),
        )

    }

    fun getIncludePackage(): Set<String> {
        val includeSet = hashSetOf<String>()
        HTTP_V3_CLASSES.forEach { includeSet.add(it.targetClassName) }
        HTTP_SAAS_CLASSES.forEach { includeSet.add(it.targetClassName) }
        DATABASE_V3_CLASSES.forEach { includeSet.add(it.targetClassName) }
        DATABASE_SAAS_CLASSES.forEach { includeSet.add(it.targetClassName) }
        WEBVIEW_CLASSES.forEach { includeSet.add(it.targetClassName) }
        WEBVIEW_EXTRA_CLASSES.forEach { includeSet.add(it.targetClassName) }
        CONFIG_CLASSES.forEach { includeSet.add(it.targetClassName) }
        return includeSet
    }
}
